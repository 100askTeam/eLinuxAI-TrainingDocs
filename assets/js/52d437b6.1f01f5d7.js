"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7124],{12997:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>_,frontMatter:()=>l,metadata:()=>o,toc:()=>r});var i=s(85893),t=s(11151);const l={sidebar_position:3},d="\u8dcc\u5012\u68c0\u6d4b",o={id:"CanaanK230/part14/part1/falldownDetect",title:"\u8dcc\u5012\u68c0\u6d4b",description:"1.\u5b9e\u9a8c\u76ee\u7684",source:"@site/docs/CanaanK230/part14/part1/03-falldownDetect.md",sourceDirName:"CanaanK230/part14/part1",slug:"/CanaanK230/part14/part1/falldownDetect",permalink:"/CanaanK230/part14/part1/falldownDetect",draft:!1,unlisted:!1,editUrl:"https://github.com/100askTeam/eLinuxAI-TrainingDocs/tree/main/docs/CanaanK230/part14/part1/03-falldownDetect.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"canaanK230Sidebar",previous:{title:"\u4eba\u4f53\u5173\u952e\u70b9\u68c0\u6d4b",permalink:"/CanaanK230/part14/part1/personKeypointDetect"},next:{title:"\u4eba\u8138\u76f8\u5173",permalink:"/category/\u4eba\u8138\u76f8\u5173"}},a={},r=[{value:"1.\u5b9e\u9a8c\u76ee\u7684",id:"1\u5b9e\u9a8c\u76ee\u7684",level:2},{value:"2.\u6838\u5fc3\u4ee3\u7801\u8bb2\u89e3",id:"2\u6838\u5fc3\u4ee3\u7801\u8bb2\u89e3",level:2},{value:"\u9884\u5904\u7406",id:"\u9884\u5904\u7406",level:3},{value:"\u6a21\u578b\u63a8\u7406",id:"\u6a21\u578b\u63a8\u7406",level:3},{value:"\u540e\u5904\u7406",id:"\u540e\u5904\u7406",level:3},{value:"3.\u793a\u4f8b\u4ee3\u7801",id:"3\u793a\u4f8b\u4ee3\u7801",level:2},{value:"4.\u5b9e\u9a8c\u7ed3\u679c",id:"4\u5b9e\u9a8c\u7ed3\u679c",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"\u8dcc\u5012\u68c0\u6d4b",children:"\u8dcc\u5012\u68c0\u6d4b"}),"\n",(0,i.jsx)(n.h2,{id:"1\u5b9e\u9a8c\u76ee\u7684",children:"1.\u5b9e\u9a8c\u76ee\u7684"}),"\n",(0,i.jsx)(n.p,{children:"\u4f7f\u7528 YOLOv5n \u6a21\u578b\u68c0\u6d4b\u201cFall\u201d\u4e0e\u201cNoFall\u201d\u76ee\u6807\uff0c\u5e76\u5728\u5c4f\u5e55\uff08LCD \u6216 HDMI\uff09\u4e0a\u8fdb\u884c\u53ef\u89c6\u5316"}),"\n",(0,i.jsx)(n.h2,{id:"2\u6838\u5fc3\u4ee3\u7801\u8bb2\u89e3",children:"2.\u6838\u5fc3\u4ee3\u7801\u8bb2\u89e3"}),"\n",(0,i.jsx)(n.h3,{id:"\u9884\u5904\u7406",children:"\u9884\u5904\u7406"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"            top, bottom, left, right = self.get_padding_param()                             # \u83b7\u53d6padding\u53c2\u6570\n            self.ai2d.pad([0, 0, 0, 0, top, bottom, left, right], 0, [0,0,0])               # \u586b\u5145\u8fb9\u7f18\n            self.ai2d.resize(nn.interp_method.tf_bilinear, nn.interp_mode.half_pixel)       # \u7f29\u653e\u56fe\u50cf\n            self.ai2d.build([1,3,ai2d_input_size[1],ai2d_input_size[0]],[1,3,self.model_input_size[1],self.model_input_size[0]])  # \u6784\u5efa\u9884\u5904\u7406\u6d41\u7a0b\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\u8ba1\u7b97\u5982\u4f55\u5c06\u6444\u50cf\u5934\u56fe\u50cf\u7b49\u6bd4\u4f8b\u7f29\u653e\u5230\u6a21\u578b\u8f93\u5165\u5c3a\u5bf8 ",(0,i.jsx)(n.code,{children:"[640, 640]"}),"\uff0c\u5e76\u81ea\u52a8\u6dfb\u52a0 padding\u3002"]}),"\n",(0,i.jsx)(n.h3,{id:"\u6a21\u578b\u63a8\u7406",children:"\u6a21\u578b\u63a8\u7406"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"                res = fall_det.run(img)  \n"})}),"\n",(0,i.jsx)(n.h3,{id:"\u540e\u5904\u7406",children:"\u540e\u5904\u7406"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"            dets = aicube.anchorbasedet_post_process(results[0], results[1], results[2], self.model_input_size, self.rgb888p_size, self.strides, len(self.labels), self.confidence_threshold, self.nms_threshold, self.anchors, self.nms_option)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\u6b64\u51fd\u6570\u7528\u7684\u662f ",(0,i.jsx)(n.code,{children:"aicube"})," \u63d0\u4f9b\u7684 anchor-based YOLO \u540e\u5904\u7406\u51fd\u6570\uff0c\u4e3b\u8981\u529f\u80fd\u6709\uff1a"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u5c06\u6a21\u578b raw \u8f93\u51fa\uff08\u901a\u5e38\u662f feature map\uff09\u8fd8\u539f\u4e3a bounding box \u5750\u6807\u548c\u7c7b\u522b"}),"\n",(0,i.jsx)(n.li,{children:"\u5e94\u7528\u7f6e\u4fe1\u5ea6\u7b5b\u9009\u3001NMS\uff08\u975e\u6781\u5927\u503c\u6291\u5236\uff09"}),"\n",(0,i.jsxs)(n.li,{children:["\u8fd4\u56de\u683c\u5f0f\u4e3a ",(0,i.jsx)(n.code,{children:"[cls_id, score, x1, y1, x2, y2]"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"3\u793a\u4f8b\u4ee3\u7801",children:"3.\u793a\u4f8b\u4ee3\u7801"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\'\'\'\n\u672c\u7a0b\u5e8f\u9075\u5faaGPL V3\u534f\u8bae, \u8bf7\u9075\u5faa\u534f\u8bae\n\u5b9e\u9a8c\u5e73\u53f0\uff1a DshanPI CanMV\n\u5f00\u53d1\u677f\u6587\u6863\u7ad9\u70b9\t: https://eai.100ask.net/\n\u767e\u95ee\u7f51\u5b66\u4e60\u5e73\u53f0   : https://www.100ask.net\n\u767e\u95ee\u7f51\u5b98\u65b9B\u7ad9    : https://space.bilibili.com/275908810\n\u767e\u95ee\u7f51\u5b98\u65b9\u6dd8\u5b9d   : https://100ask.taobao.com\n\'\'\'\nfrom libs.PipeLine import PipeLine, ScopedTiming\nfrom libs.AIBase import AIBase\nfrom libs.AI2D import Ai2d\nimport os\nimport ujson\nfrom media.media import *\nfrom time import *\nimport nncase_runtime as nn\nimport ulab.numpy as np\nimport time\nimport utime\nimport image\nimport random\nimport gc\nimport sys\nimport aicube\n\n# \u81ea\u5b9a\u4e49\u8dcc\u5012\u68c0\u6d4b\u7c7b\uff0c\u7ee7\u627f\u81eaAIBase\u57fa\u7c7b\nclass FallDetectionApp(AIBase):\n    def __init__(self, kmodel_path, model_input_size, labels, anchors, confidence_threshold=0.2, nms_threshold=0.5, nms_option=False, strides=[8,16,32], rgb888p_size=[224,224], display_size=[1920,1080], debug_mode=0):\n        super().__init__(kmodel_path, model_input_size, rgb888p_size, debug_mode)  # \u8c03\u7528\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\n        self.kmodel_path = kmodel_path                      # \u6a21\u578b\u6587\u4ef6\u8def\u5f84\n        self.model_input_size = model_input_size            # \u6a21\u578b\u8f93\u5165\u5206\u8fa8\u7387\n        self.labels = labels                                # \u5206\u7c7b\u6807\u7b7e\n        self.anchors = anchors                              # \u951a\u70b9\u6570\u636e\uff0c\u7528\u4e8e\u8dcc\u5012\u68c0\u6d4b\n        self.strides = strides                              # \u6b65\u957f\u8bbe\u7f6e\n        self.confidence_threshold = confidence_threshold    # \u7f6e\u4fe1\u5ea6\u9608\u503c\n        self.nms_threshold = nms_threshold                  # NMS\uff08\u975e\u6781\u5927\u503c\u6291\u5236\uff09\u9608\u503c\n        self.nms_option = nms_option                        # NMS\u9009\u9879\n        self.rgb888p_size = [ALIGN_UP(rgb888p_size[0], 16), rgb888p_size[1]]  # sensor\u7ed9\u5230AI\u7684\u56fe\u50cf\u5206\u8fa8\u7387\uff0c\u5e76\u5bf9\u5bbd\u5ea6\u8fdb\u884c16\u7684\u5bf9\u9f50\n        self.display_size = [ALIGN_UP(display_size[0], 16), display_size[1]]  # \u663e\u793a\u5206\u8fa8\u7387\uff0c\u5e76\u5bf9\u5bbd\u5ea6\u8fdb\u884c16\u7684\u5bf9\u9f50\n        self.debug_mode = debug_mode                                          # \u662f\u5426\u5f00\u542f\u8c03\u8bd5\u6a21\u5f0f\n        self.color = [(255,0, 0, 255), (255,0, 255, 0), (255,255,0, 0), (255,255,0, 255)]  # \u7528\u4e8e\u7ed8\u5236\u4e0d\u540c\u7c7b\u522b\u7684\u989c\u8272\n        # Ai2d\u5b9e\u4f8b\uff0c\u7528\u4e8e\u5b9e\u73b0\u6a21\u578b\u9884\u5904\u7406\n        self.ai2d = Ai2d(debug_mode)\n        # \u8bbe\u7f6eAi2d\u7684\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\u548c\u7c7b\u578b\n        self.ai2d.set_ai2d_dtype(nn.ai2d_format.NCHW_FMT, nn.ai2d_format.NCHW_FMT, np.uint8, np.uint8)\n\n    # \u914d\u7f6e\u9884\u5904\u7406\u64cd\u4f5c\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86pad\u548cresize\uff0cAi2d\u652f\u6301crop/shift/pad/resize/affine\uff0c\u5177\u4f53\u4ee3\u7801\u8bf7\u6253\u5f00/sdcard/app/libs/AI2D.py\u67e5\u770b\n    def config_preprocess(self, input_image_size=None):\n        with ScopedTiming("set preprocess config", self.debug_mode > 0):                    # \u8ba1\u65f6\u5668\uff0c\u5982\u679cdebug_mode\u5927\u4e8e0\u5219\u5f00\u542f\n            ai2d_input_size = input_image_size if input_image_size else self.rgb888p_size   # \u521d\u59cb\u5316ai2d\u9884\u5904\u7406\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3asensor\u7ed9\u5230AI\u7684\u5c3a\u5bf8\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6einput_image_size\u81ea\u884c\u4fee\u6539\u8f93\u5165\u5c3a\u5bf8\n            top, bottom, left, right = self.get_padding_param()                             # \u83b7\u53d6padding\u53c2\u6570\n            self.ai2d.pad([0, 0, 0, 0, top, bottom, left, right], 0, [0,0,0])               # \u586b\u5145\u8fb9\u7f18\n            self.ai2d.resize(nn.interp_method.tf_bilinear, nn.interp_mode.half_pixel)       # \u7f29\u653e\u56fe\u50cf\n            self.ai2d.build([1,3,ai2d_input_size[1],ai2d_input_size[0]],[1,3,self.model_input_size[1],self.model_input_size[0]])  # \u6784\u5efa\u9884\u5904\u7406\u6d41\u7a0b\n\n    # \u81ea\u5b9a\u4e49\u5f53\u524d\u4efb\u52a1\u7684\u540e\u5904\u7406\uff0cresults\u662f\u6a21\u578b\u8f93\u51faarray\u7684\u5217\u8868\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86aicube\u5e93\u7684anchorbasedet_post_process\u63a5\u53e3\n    def postprocess(self, results):\n        with ScopedTiming("postprocess", self.debug_mode > 0):\n            dets = aicube.anchorbasedet_post_process(results[0], results[1], results[2], self.model_input_size, self.rgb888p_size, self.strides, len(self.labels), self.confidence_threshold, self.nms_threshold, self.anchors, self.nms_option)\n            return dets\n\n    # \u7ed8\u5236\u68c0\u6d4b\u7ed3\u679c\u5230\u753b\u9762\u4e0a\n    def draw_result(self, pl, dets):\n        with ScopedTiming("display_draw", self.debug_mode > 0):\n            if dets:\n                pl.osd_img.clear()  # \u6e05\u9664OSD\u56fe\u50cf\n                for det_box in dets:\n                    # \u8ba1\u7b97\u663e\u793a\u5206\u8fa8\u7387\u4e0b\u7684\u5750\u6807\n                    x1, y1, x2, y2 = det_box[2], det_box[3], det_box[4], det_box[5]\n                    w = (x2 - x1) * self.display_size[0] // self.rgb888p_size[0]\n                    h = (y2 - y1) * self.display_size[1] // self.rgb888p_size[1]\n                    x1 = int(x1 * self.display_size[0] // self.rgb888p_size[0])\n                    y1 = int(y1 * self.display_size[1] // self.rgb888p_size[1])\n                    x2 = int(x2 * self.display_size[0] // self.rgb888p_size[0])\n                    y2 = int(y2 * self.display_size[1] // self.rgb888p_size[1])\n                    # \u7ed8\u5236\u77e9\u5f62\u6846\u548c\u7c7b\u522b\u6807\u7b7e\n                    pl.osd_img.draw_rectangle(x1, y1, int(w), int(h), color=self.color[det_box[0]], thickness=2)\n                    pl.osd_img.draw_string_advanced(x1, y1-50, 32," " + self.labels[det_box[0]] + " " + str(round(det_box[1],2)), color=self.color[det_box[0]])\n            else:\n                pl.osd_img.clear()\n\n    # \u83b7\u53d6padding\u53c2\u6570\n    def get_padding_param(self):\n        dst_w = self.model_input_size[0]\n        dst_h = self.model_input_size[1]\n        input_width = self.rgb888p_size[0]\n        input_high = self.rgb888p_size[1]\n        ratio_w = dst_w / input_width\n        ratio_h = dst_h / input_high\n        if ratio_w < ratio_h:\n            ratio = ratio_w\n        else:\n            ratio = ratio_h\n        new_w = int(ratio * input_width)\n        new_h = int(ratio * input_high)\n        dw = (dst_w - new_w) / 2\n        dh = (dst_h - new_h) / 2\n        top = int(round(dh - 0.1))\n        bottom = int(round(dh + 0.1))\n        left = int(round(dw - 0.1))\n        right = int(round(dw - 0.1))\n        return top, bottom, left, right\n\nif __name__ == "__main__":\n    # \u663e\u793a\u6a21\u5f0f\uff0c\u9ed8\u8ba4"hdmi",\u53ef\u4ee5\u9009\u62e9"hdmi"\u548c"lcd"\n    display_mode="lcd"\n    # k230\u4fdd\u6301\u4e0d\u53d8\uff0ck230d\u53ef\u8c03\u6574\u4e3a[640,360]\n    rgb888p_size = [1920, 1080]\n\n    if display_mode=="hdmi":\n        display_size=[1920,1080]\n    else:\n        display_size=[800,480]\n    # \u8bbe\u7f6e\u6a21\u578b\u8def\u5f84\u548c\u5176\u4ed6\u53c2\u6570\n    kmodel_path = "/sdcard/examples/kmodel/yolov5n-falldown.kmodel"\n    confidence_threshold = 0.3\n    nms_threshold = 0.45\n    labels = ["Fall","NoFall"]  # \u6a21\u578b\u8f93\u51fa\u7c7b\u522b\u540d\u79f0\n    anchors = [10, 13, 16, 30, 33, 23, 30, 61, 62, 45, 59, 119, 116, 90, 156, 198, 373, 326]  # anchor\u8bbe\u7f6e\n\n    # \u521d\u59cb\u5316PipeLine\uff0c\u7528\u4e8e\u56fe\u50cf\u5904\u7406\u6d41\u7a0b\n    pl = PipeLine(rgb888p_size=rgb888p_size, display_size=display_size, display_mode=display_mode)\n    pl.create()\n    # \u521d\u59cb\u5316\u81ea\u5b9a\u4e49\u8dcc\u5012\u68c0\u6d4b\u5b9e\u4f8b\n    fall_det = FallDetectionApp(kmodel_path, model_input_size=[640, 640], labels=labels, anchors=anchors, confidence_threshold=confidence_threshold, nms_threshold=nms_threshold, nms_option=False, strides=[8,16,32], rgb888p_size=rgb888p_size, display_size=display_size, debug_mode=0)\n    fall_det.config_preprocess()\n    try:\n        while True:\n            os.exitpoint()                                  # \u68c0\u67e5\u662f\u5426\u6709\u9000\u51fa\u4fe1\u53f7\n            with ScopedTiming("total",1):\n                img = pl.get_frame()                        # \u83b7\u53d6\u5f53\u524d\u5e27\u6570\u636e\n                res = fall_det.run(img)                     # \u63a8\u7406\u5f53\u524d\u5e27\n                fall_det.draw_result(pl, res)               # \u7ed8\u5236\u7ed3\u679c\u5230PipeLine\u7684osd\u56fe\u50cf\n                pl.show_image()                             # \u663e\u793a\u5f53\u524d\u7684\u7ed8\u5236\u7ed3\u679c\n                gc.collect()                                # \u5783\u573e\u56de\u6536\n    except Exception as e:\n        sys.print_exception(e)                              # \u6253\u5370\u5f02\u5e38\u4fe1\u606f\n    finally:\n        fall_det.deinit()                                   # \u53cd\u521d\u59cb\u5316\n        pl.destroy()                                        # \u9500\u6bc1PipeLine\u5b9e\u4f8b\n'})}),"\n",(0,i.jsx)(n.h2,{id:"4\u5b9e\u9a8c\u7ed3\u679c",children:"4.\u5b9e\u9a8c\u7ed3\u679c"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"people(180)",src:s(71605).Z+"",width:"800",height:"533"})}),"\n",(0,i.jsx)(n.p,{children:"\u200b\t\t\u70b9\u51fb\u8fd0\u884c\u4ee3\u7801\u540e\uff0c\u53ef\u4ee5\u5728\u663e\u793a\u5c4f\u4e0a\u770b\u5230\u8dcc\u5012\u68c0\u6d4b\u7684\u7ed3\u679c\u3002\u5982\u4e0b\u6240\u793a\uff1a"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"image-20250423171045731",src:s(85987).Z+"",width:"1368",height:"1031"})})]})}function _(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},85987:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/image-20250423171045731-37876f9a5bb658f60bcde02056f92dfb.png"},71605:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/people(180)-ea11666feaba1abe9ad2f5137faca723.jpg"},11151:(e,n,s)=>{s.d(n,{Z:()=>o,a:()=>d});var i=s(67294);const t={},l=i.createContext(t);function d(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);