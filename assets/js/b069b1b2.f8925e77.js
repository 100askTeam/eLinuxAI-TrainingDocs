"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2201],{95512:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>_,frontMatter:()=>d,metadata:()=>a,toc:()=>r});var s=i(85893),t=i(11151);const d={sidebar_position:1},o="\u624b\u638c\u68c0\u6d4b",a={id:"CanaanK230/part14/part3/handDetection",title:"\u624b\u638c\u68c0\u6d4b",description:"1.\u5b66\u4e60\u76ee\u7684",source:"@site/docs/CanaanK230/part14/part3/01-handDetection.md",sourceDirName:"CanaanK230/part14/part3",slug:"/CanaanK230/part14/part3/handDetection",permalink:"/CanaanK230/part14/part3/handDetection",draft:!1,unlisted:!1,editUrl:"https://github.com/100askTeam/eLinuxAI-TrainingDocs/tree/main/docs/CanaanK230/part14/part3/01-handDetection.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"canaanK230Sidebar",previous:{title:"\u624b\u90e8\u76f8\u5173",permalink:"/category/\u624b\u90e8\u76f8\u5173"},next:{title:"\u624b\u52bf\u68c0\u6d4b",permalink:"/CanaanK230/part14/part3/hand_recognition"}},l={},r=[{value:"1.\u5b66\u4e60\u76ee\u7684",id:"1\u5b66\u4e60\u76ee\u7684",level:2},{value:"2.\u793a\u4f8b\u4ee3\u7801",id:"2\u793a\u4f8b\u4ee3\u7801",level:2},{value:"3.\u5b9e\u9a8c\u7ed3\u679c",id:"3\u5b9e\u9a8c\u7ed3\u679c",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"\u624b\u638c\u68c0\u6d4b",children:"\u624b\u638c\u68c0\u6d4b"}),"\n",(0,s.jsx)(n.h2,{id:"1\u5b66\u4e60\u76ee\u7684",children:"1.\u5b66\u4e60\u76ee\u7684"}),"\n",(0,s.jsx)(n.p,{children:"\u5b66\u4e60\u6444\u50cf\u5934\u7684\u753b\u9762\u8fdb\u884c\u624b\u90e8\u68c0\u6d4b\u3002"}),"\n",(0,s.jsx)(n.h2,{id:"2\u793a\u4f8b\u4ee3\u7801",children:"2.\u793a\u4f8b\u4ee3\u7801"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'\'\'\'\n\u672c\u7a0b\u5e8f\u9075\u5faaGPL V3\u534f\u8bae, \u8bf7\u9075\u5faa\u534f\u8bae\n\u5b9e\u9a8c\u5e73\u53f0: DshanPI CanMV\n\u5f00\u53d1\u677f\u6587\u6863\u7ad9\u70b9\t: https://eai.100ask.net/\n\u767e\u95ee\u7f51\u5b66\u4e60\u5e73\u53f0   : https://www.100ask.net\n\u767e\u95ee\u7f51\u5b98\u65b9B\u7ad9    : https://space.bilibili.com/275908810\n\u767e\u95ee\u7f51\u5b98\u65b9\u6dd8\u5b9d   : https://100ask.taobao.com\n\'\'\'\nfrom libs.PipeLine import PipeLine, ScopedTiming\nfrom libs.AIBase import AIBase\nfrom libs.AI2D import Ai2d\nimport os\nimport ujson\nfrom media.media import *\nfrom time import *\nimport nncase_runtime as nn\nimport ulab.numpy as np\nimport time\nimport utime\nimport image\nimport random\nimport gc\nimport sys\nimport aicube\n\n# \u81ea\u5b9a\u4e49\u624b\u638c\u68c0\u6d4b\u7c7b\uff0c\u7ee7\u627f\u81eaAIBase\u57fa\u7c7b\nclass HandDetectionApp(AIBase):\n    def __init__(self, kmodel_path, model_input_size, labels, anchors, confidence_threshold=0.2, nms_threshold=0.5, nms_option=False, strides=[8,16,32], rgb888p_size=[224,224], display_size=[1920,1080], debug_mode=0):\n        super().__init__(kmodel_path, model_input_size, rgb888p_size, debug_mode)  # \u8c03\u7528\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\uff0c\u521d\u59cb\u5316\u6a21\u578b\u6587\u4ef6\u8def\u5f84\u3001\u6a21\u578b\u8f93\u5165\u5206\u8fa8\u7387\u3001RGB\u56fe\u50cf\u5206\u8fa8\u7387\u548c\u8c03\u8bd5\u6a21\u5f0f\n        self.kmodel_path = kmodel_path  # \u6a21\u578b\u6587\u4ef6\u8def\u5f84\n        self.model_input_size = model_input_size  # \u6a21\u578b\u8f93\u5165\u5206\u8fa8\u7387\n        self.labels = labels  # \u6a21\u578b\u8f93\u51fa\u7684\u7c7b\u522b\u6807\u7b7e\u5217\u8868\n        self.anchors = anchors  # \u7528\u4e8e\u76ee\u6807\u68c0\u6d4b\u7684\u951a\u70b9\u5c3a\u5bf8\u5217\u8868\n        self.strides = strides  # \u7279\u5f81\u4e0b\u91c7\u6837\u500d\u6570\n        self.confidence_threshold = confidence_threshold  # \u7f6e\u4fe1\u5ea6\u9608\u503c\uff0c\u7528\u4e8e\u8fc7\u6ee4\u4f4e\u7f6e\u4fe1\u5ea6\u7684\u68c0\u6d4b\u7ed3\u679c\n        self.nms_threshold = nms_threshold  # NMS\uff08\u975e\u6781\u5927\u503c\u6291\u5236\uff09\u9608\u503c\uff0c\u7528\u4e8e\u53bb\u9664\u91cd\u53e0\u7684\u68c0\u6d4b\u6846\n        self.nms_option = nms_option  # NMS\u9009\u9879\uff0c\u53ef\u80fd\u5f71\u54cdNMS\u7684\u5177\u4f53\u5b9e\u73b0\n        self.rgb888p_size = [ALIGN_UP(rgb888p_size[0], 16), rgb888p_size[1]]  # sensor\u7ed9\u5230AI\u7684\u56fe\u50cf\u5206\u8fa8\u7387\uff0c\u5bf9\u9f50\u5230\u6700\u8fd1\u768416\u7684\u500d\u6570\n        self.display_size = [ALIGN_UP(display_size[0], 16), display_size[1]]  # \u663e\u793a\u5206\u8fa8\u7387\uff0c\u5bf9\u9f50\u5230\u6700\u8fd1\u768416\u7684\u500d\u6570\n        self.debug_mode = debug_mode  # \u8c03\u8bd5\u6a21\u5f0f\uff0c\u7528\u4e8e\u8f93\u51fa\u8c03\u8bd5\u4fe1\u606f\n        self.ai2d = Ai2d(debug_mode)  # \u5b9e\u4f8b\u5316Ai2d\u7c7b\uff0c\u7528\u4e8e\u5b9e\u73b0\u6a21\u578b\u9884\u5904\u7406\n        # \u8bbe\u7f6eAi2d\u7684\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\u548c\u7c7b\u578b\uff0c\u8fd9\u91cc\u4f7f\u7528NCHW\u683c\u5f0f\uff0c\u6570\u636e\u7c7b\u578b\u4e3auint8\n        self.ai2d.set_ai2d_dtype(nn.ai2d_format.NCHW_FMT, nn.ai2d_format.NCHW_FMT, np.uint8, np.uint8)\n\n    # \u914d\u7f6e\u9884\u5904\u7406\u64cd\u4f5c\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86pad\u548cresize\n    def config_preprocess(self, input_image_size=None):\n        with ScopedTiming("set preprocess config", self.debug_mode > 0):  # \u4f7f\u7528ScopedTiming\u88c5\u9970\u5668\u6765\u6d4b\u91cf\u9884\u5904\u7406\u914d\u7f6e\u7684\u65f6\u95f4\n            # \u521d\u59cb\u5316ai2d\u9884\u5904\u7406\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3asensor\u7ed9\u5230AI\u7684\u5c3a\u5bf8\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6einput_image_size\u81ea\u884c\u4fee\u6539\u8f93\u5165\u5c3a\u5bf8\n            ai2d_input_size = input_image_size if input_image_size else self.rgb888p_size\n            # \u8ba1\u7b97padding\u53c2\u6570\u5e76\u5e94\u7528pad\u64cd\u4f5c\uff0c\u4ee5\u786e\u4fdd\u8f93\u5165\u56fe\u50cf\u5c3a\u5bf8\u4e0e\u6a21\u578b\u8f93\u5165\u5c3a\u5bf8\u5339\u914d\n            top, bottom, left, right = self.get_padding_param()\n            self.ai2d.pad([0, 0, 0, 0, top, bottom, left, right], 0, [0, 0, 0])\n            # \u4f7f\u7528\u53cc\u7ebf\u6027\u63d2\u503c\u8fdb\u884cresize\u64cd\u4f5c\uff0c\u8c03\u6574\u56fe\u50cf\u5c3a\u5bf8\u4ee5\u7b26\u5408\u6a21\u578b\u8f93\u5165\u8981\u6c42\n            self.ai2d.resize(nn.interp_method.tf_bilinear, nn.interp_mode.half_pixel)\n            # \u6784\u5efa\u9884\u5904\u7406\u6d41\u7a0b\n            self.ai2d.build([1,3,ai2d_input_size[1],ai2d_input_size[0]],[1,3,self.model_input_size[1],self.model_input_size[0]])\n\n    # \u81ea\u5b9a\u4e49\u5f53\u524d\u4efb\u52a1\u7684\u540e\u5904\u7406\uff0c\u7528\u4e8e\u5904\u7406\u6a21\u578b\u8f93\u51fa\u7ed3\u679c\n    def postprocess(self, results):\n        with ScopedTiming("postprocess", self.debug_mode > 0):  # \u4f7f\u7528ScopedTiming\u88c5\u9970\u5668\u6765\u6d4b\u91cf\u540e\u5904\u7406\u7684\u65f6\u95f4\n            # \u4f7f\u7528aicube\u5e93\u7684\u51fd\u6570\u8fdb\u884c\u540e\u5904\u7406\uff0c\u5f97\u5230\u6700\u7ec8\u7684\u68c0\u6d4b\u7ed3\u679c\n            dets = aicube.anchorbasedet_post_process(results[0], results[1], results[2], self.model_input_size, self.rgb888p_size, self.strides, len(self.labels), self.confidence_threshold, self.nms_threshold, self.anchors, self.nms_option)\n            return dets\n\n    # \u7ed8\u5236\u68c0\u6d4b\u7ed3\u679c\u5230\u5c4f\u5e55\u4e0a\n    def draw_result(self, pl, dets):\n        with ScopedTiming("display_draw", self.debug_mode > 0):  # \u4f7f\u7528ScopedTiming\u88c5\u9970\u5668\u6765\u6d4b\u91cf\u7ed8\u5236\u7ed3\u679c\u7684\u65f6\u95f4\n            if dets:  # \u5982\u679c\u5b58\u5728\u68c0\u6d4b\u7ed3\u679c\n                pl.osd_img.clear()  # \u6e05\u9664\u5c4f\u5e55\u4e0a\u7684\u65e7\u5185\u5bb9\n                for det_box in dets:  # \u904d\u5386\u6bcf\u4e2a\u68c0\u6d4b\u6846\n                    # \u6839\u636e\u6a21\u578b\u8f93\u51fa\u8ba1\u7b97\u68c0\u6d4b\u6846\u7684\u50cf\u7d20\u5750\u6807\uff0c\u5e76\u8c03\u6574\u5927\u5c0f\u4ee5\u9002\u5e94\u663e\u793a\u5206\u8fa8\u7387\n                    x1, y1, x2, y2 = det_box[2], det_box[3], det_box[4], det_box[5]\n                    w = float(x2 - x1) * self.display_size[0] // self.rgb888p_size[0]\n                    h = float(y2 - y1) * self.display_size[1] // self.rgb888p_size[1]\n                    x1 = int(x1 * self.display_size[0] // self.rgb888p_size[0])\n                    y1 = int(y1 * self.display_size[1] // self.rgb888p_size[1])\n                    x2 = int(x2 * self.display_size[0] // self.rgb888p_size[0])\n                    y2 = int(y2 * self.display_size[1] // self.rgb888p_size[1])\n                    # \u8fc7\u6ee4\u6389\u592a\u5c0f\u6216\u8005\u4f4d\u7f6e\u4e0d\u5408\u7406\u7684\u68c0\u6d4b\u6846\n                    if (h < (0.1 * self.display_size[0])):\n                        continue\n                    if (w < (0.25 * self.display_size[0]) and ((x1 < (0.03 * self.display_size[0])) or (x2 > (0.97 * self.display_size[0])))):\n                        continue\n                    if (w < (0.15 * self.display_size[0]) and ((x1 < (0.01 * self.display_size[0])) or (x2 > (0.99 * self.display_size[0])))):\n                        continue\n                    # \u7ed8\u5236\u77e9\u5f62\u6846\u548c\u7c7b\u522b\u6807\u7b7e\n                    pl.osd_img.draw_rectangle(x1, y1, int(w), int(h), color=(255, 0, 255, 0), thickness=2)\n                    pl.osd_img.draw_string_advanced(x1, y1-50,32, " " + self.labels[det_box[0]] + " " + str(round(det_box[1], 2)), color=(255, 0, 255, 0))\n            else:\n                pl.osd_img.clear()  # \u5982\u679c\u6ca1\u6709\u68c0\u6d4b\u7ed3\u679c\uff0c\u6e05\u7a7a\u5c4f\u5e55\n\n    # \u8ba1\u7b97padding\u53c2\u6570\uff0c\u786e\u4fdd\u8f93\u5165\u56fe\u50cf\u5c3a\u5bf8\u4e0e\u6a21\u578b\u8f93\u5165\u5c3a\u5bf8\u5339\u914d\n    def get_padding_param(self):\n        # \u6839\u636e\u76ee\u6807\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u8ba1\u7b97\u6bd4\u4f8b\u56e0\u5b50\n        dst_w = self.model_input_size[0]\n        dst_h = self.model_input_size[1]\n        input_width = self.rgb888p_size[0]\n        input_high = self.rgb888p_size[1]\n        ratio_w = dst_w / input_width\n        ratio_h = dst_h / input_high\n        # \u9009\u62e9\u8f83\u5c0f\u7684\u6bd4\u4f8b\u56e0\u5b50\uff0c\u4ee5\u786e\u4fdd\u56fe\u50cf\u5185\u5bb9\u5b8c\u6574\n        if ratio_w < ratio_h:\n            ratio = ratio_w\n        else:\n            ratio = ratio_h\n        # \u8ba1\u7b97\u65b0\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\n        new_w = int(ratio * input_width)\n        new_h = int(ratio * input_high)\n        # \u8ba1\u7b97\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u7684\u5dee\u503c\uff0c\u5e76\u786e\u5b9apadding\u7684\u4f4d\u7f6e\n        dw = (dst_w - new_w) / 2\n        dh = (dst_h - new_h) / 2\n        top = int(round(dh - 0.1))\n        bottom = int(round(dh + 0.1))\n        left = int(round(dw - 0.1))\n        right = int(round(dw + 0.1))\n        return top, bottom, left, right\n\nif __name__=="__main__":\n    # \u663e\u793a\u6a21\u5f0f\uff0c\u9ed8\u8ba4"hdmi",\u53ef\u4ee5\u9009\u62e9"hdmi"\u548c"lcd"\n    display_mode="lcd"\n    # k230\u4fdd\u6301\u4e0d\u53d8\uff0ck230d\u53ef\u8c03\u6574\u4e3a[640,360]\n    rgb888p_size = [1920, 1080]\n\n    if display_mode=="hdmi":\n        display_size=[1920,1080]\n    else:\n        display_size=[800,480]\n    # \u6a21\u578b\u8def\u5f84\n    kmodel_path="/sdcard/examples/kmodel/hand_det.kmodel"\n    # \u5176\u5b83\u53c2\u6570\u8bbe\u7f6e\n    confidence_threshold = 0.2\n    nms_threshold = 0.5\n    labels = ["hand"]\n    anchors = [26,27, 53,52, 75,71, 80,99, 106,82, 99,134, 140,113, 161,172, 245,276]   #anchor\u8bbe\u7f6e\n\n    # \u521d\u59cb\u5316PipeLine\n    pl=PipeLine(rgb888p_size=rgb888p_size,display_size=display_size,display_mode=display_mode)\n    pl.create()\n    # \u521d\u59cb\u5316\u81ea\u5b9a\u4e49\u624b\u638c\u68c0\u6d4b\u5b9e\u4f8b\n    hand_det=HandDetectionApp(kmodel_path,model_input_size=[512,512],labels=labels,anchors=anchors,confidence_threshold=confidence_threshold,nms_threshold=nms_threshold,nms_option=False,strides=[8,16,32],rgb888p_size=rgb888p_size,display_size=display_size,debug_mode=0)\n    hand_det.config_preprocess()\n    try:\n        while True:\n            os.exitpoint()                              # \u68c0\u67e5\u662f\u5426\u6709\u9000\u51fa\u4fe1\u53f7\n            with ScopedTiming("total",1):\n                img=pl.get_frame()                      # \u83b7\u53d6\u5f53\u524d\u5e27\u6570\u636e\n                res=hand_det.run(img)                   # \u63a8\u7406\u5f53\u524d\u5e27\n                hand_det.draw_result(pl,res)            # \u7ed8\u5236\u7ed3\u679c\u5230PipeLine\u7684osd\u56fe\u50cf\n                pl.show_image()                         # \u663e\u793a\u5f53\u524d\u7684\u7ed8\u5236\u7ed3\u679c\n                gc.collect()                            # \u5783\u573e\u56de\u6536\n    except Exception as e:\n        sys.print_exception(e)\n    finally:\n        hand_det.deinit()                               # \u53cd\u521d\u59cb\u5316\n        pl.destroy()                                    # \u9500\u6bc1PipeLine\u5b9e\u4f8b\n'})}),"\n",(0,s.jsx)(n.h2,{id:"3\u5b9e\u9a8c\u7ed3\u679c",children:"3.\u5b9e\u9a8c\u7ed3\u679c"}),"\n",(0,s.jsx)(n.p,{children:"\u200b\t\u8fd0\u884c\u7a0b\u5e8f\u8fdb\u884c\u624b\u638c\u68c0\u6d4b\u7684\u7ed3\u679c\u4e3a\uff1a"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"image-20250423175609874",src:i(68141).Z+"",width:"1809",height:"1029"})})]})}function _(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},68141:(e,n,i)=>{i.d(n,{Z:()=>s});const s=i.p+"assets/images/image-20250423175609874-7b5a116a3aa6da2809117c4178803b92.png"},11151:(e,n,i)=>{i.d(n,{Z:()=>a,a:()=>o});var s=i(67294);const t={},d=s.createContext(t);function o(e){const n=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);