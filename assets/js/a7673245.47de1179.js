"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8587],{11236:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>d,default:()=>l,frontMatter:()=>_,metadata:()=>a,toc:()=>p});var i=s(85893),t=s(11151);const _={sidebar_position:4},d="\u4eba\u8138\u6ce8\u89c6\u65b9\u5411\u68c0\u6d4b",a={id:"CanaanK230/part14/part2/eyeGaze",title:"\u4eba\u8138\u6ce8\u89c6\u65b9\u5411\u68c0\u6d4b",description:"1.\u5b9e\u9a8c\u76ee\u7684",source:"@site/docs/CanaanK230/part14/part2/04-eyeGaze.md",sourceDirName:"CanaanK230/part14/part2",slug:"/CanaanK230/part14/part2/eyeGaze",permalink:"/CanaanK230/part14/part2/eyeGaze",draft:!1,unlisted:!1,editUrl:"https://github.com/100askTeam/eLinuxAI-TrainingDocs/tree/main/docs/CanaanK230/part14/part2/04-eyeGaze.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"canaanK230Sidebar",previous:{title:"3D\u4eba\u8138\u7f51\u683c",permalink:"/CanaanK230/part14/part2/faceMesh"},next:{title:"\u4eba\u8138\u89e3\u6790\uff08\u5206\u5272\uff09",permalink:"/CanaanK230/part14/part2/faceParse"}},r={},p=[{value:"1.\u5b9e\u9a8c\u76ee\u7684",id:"1\u5b9e\u9a8c\u76ee\u7684",level:2},{value:"2.\u6838\u5fc3\u4ee3\u7801",id:"2\u6838\u5fc3\u4ee3\u7801",level:2},{value:"3.\u793a\u4f8b\u4ee3\u7801",id:"3\u793a\u4f8b\u4ee3\u7801",level:2},{value:"4.\u5b9e\u9a8c\u7ed3\u679c",id:"4\u5b9e\u9a8c\u7ed3\u679c",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"\u4eba\u8138\u6ce8\u89c6\u65b9\u5411\u68c0\u6d4b",children:"\u4eba\u8138\u6ce8\u89c6\u65b9\u5411\u68c0\u6d4b"}),"\n",(0,i.jsx)(n.h2,{id:"1\u5b9e\u9a8c\u76ee\u7684",children:"1.\u5b9e\u9a8c\u76ee\u7684"}),"\n",(0,i.jsx)(n.p,{children:"\u901a\u8fc7\u4eba\u8138\u548c\u773c\u775b\u7684\u7279\u5f81\u6765\u786e\u5b9a\u4eba\u7684\u6ce8\u89c6\u65b9\u5411\u3002"}),"\n",(0,i.jsx)(n.h2,{id:"2\u6838\u5fc3\u4ee3\u7801",children:"2.\u6838\u5fc3\u4ee3\u7801"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"          +-----------------+\n          |    PipeLine     |  \u2190 \u56fe\u50cf\u91c7\u96c6\u3001\u663e\u793a\u3001OSD\u56fe\u50cf\u7ba1\u7406\n          +-----------------+\n                   |\n                   v\n       +------------------------+\n       |      face_app.run()    |  \u2190 \u4eba\u8138\u68c0\u6d4b (YOLOv8 \u6a21\u578b)\n       +------------------------+\n                   |\n        \u4eba\u8138\u6846 dets: [x, y, w, h]\n                   |\n                   v\n       +------------------------+\n       |     eye_app.run()      |  \u2190 \u6ce8\u89c6\u65b9\u5411\u4f30\u8ba1 (gaze \u6a21\u578b)\n       +------------------------+\n                   |\n        \u6ce8\u89c6\u89d2\u5ea6 gaze_res: [yaw, pitch]\n                   |\n                   v\n       +------------------------+\n       | eye_app.draw_result() |  \u2190 OSD \u56fe\u50cf\u4e0a\u7ed8\u5236\u65b9\u5411\u7bad\u5934\n       +------------------------+\n"})}),"\n",(0,i.jsx)(n.h2,{id:"3\u793a\u4f8b\u4ee3\u7801",children:"3.\u793a\u4f8b\u4ee3\u7801"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\'\'\'\n\u672c\u7a0b\u5e8f\u9075\u5faaGPL V3\u534f\u8bae, \u8bf7\u9075\u5faa\u534f\u8bae\n\u5b9e\u9a8c\u5e73\u53f0\uff1a DshanPI CanMV\n\u5f00\u53d1\u677f\u6587\u6863\u7ad9\u70b9\t: https://eai.100ask.net/\n\u767e\u95ee\u7f51\u5b66\u4e60\u5e73\u53f0   : https://www.100ask.net\n\u767e\u95ee\u7f51\u5b98\u65b9B\u7ad9    : https://space.bilibili.com/275908810\n\u767e\u95ee\u7f51\u5b98\u65b9\u6dd8\u5b9d   : https://100ask.taobao.com\n\'\'\'\nfrom libs.PipeLine import PipeLine, ScopedTiming\nfrom libs.AIBase import AIBase\nfrom libs.AI2D import Ai2d\nimport os\nimport ujson\nfrom media.media import *\nfrom time import *\nimport nncase_runtime as nn\nimport ulab.numpy as np\nimport time\nimport image\nimport aidemo\nimport random\nimport gc\nimport sys\nimport math\n\n# \u81ea\u5b9a\u4e49\u4eba\u8138\u68c0\u6d4b\u4efb\u52a1\u7c7b\nclass FaceDetApp(AIBase):\n    def __init__(self,kmodel_path,model_input_size,anchors,confidence_threshold=0.25,nms_threshold=0.3,rgb888p_size=[1280,720],display_size=[1920,1080],debug_mode=0):\n        super().__init__(kmodel_path,model_input_size,rgb888p_size,debug_mode)\n        # kmodel\u8def\u5f84\n        self.kmodel_path=kmodel_path\n        # \u68c0\u6d4b\u6a21\u578b\u8f93\u5165\u5206\u8fa8\u7387\n        self.model_input_size=model_input_size\n        # \u7f6e\u4fe1\u5ea6\u9608\u503c\n        self.confidence_threshold=confidence_threshold\n        # nms\u9608\u503c\n        self.nms_threshold=nms_threshold\n        self.anchors=anchors\n        # sensor\u7ed9\u5230AI\u7684\u56fe\u50cf\u5206\u8fa8\u7387\uff0c\u5bbd16\u5b57\u8282\u5bf9\u9f50\n        self.rgb888p_size=[ALIGN_UP(rgb888p_size[0],16),rgb888p_size[1]]\n        # \u89c6\u9891\u8f93\u51faVO\u5206\u8fa8\u7387\uff0c\u5bbd16\u5b57\u8282\u5bf9\u9f50\n        self.display_size=[ALIGN_UP(display_size[0],16),display_size[1]]\n        # debug\u6a21\u5f0f\n        self.debug_mode=debug_mode\n        # Ai2d\u5b9e\u4f8b\uff0c\u7528\u4e8e\u5b9e\u73b0\u6a21\u578b\u9884\u5904\u7406\n        self.ai2d=Ai2d(debug_mode)\n        # \u8bbe\u7f6eAi2d\u7684\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\u548c\u7c7b\u578b\n        self.ai2d.set_ai2d_dtype(nn.ai2d_format.NCHW_FMT,nn.ai2d_format.NCHW_FMT,np.uint8, np.uint8)\n\n    # \u914d\u7f6e\u9884\u5904\u7406\u64cd\u4f5c\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86padding\u548cresize\uff0cAi2d\u652f\u6301crop/shift/pad/resize/affine\uff0c\u5177\u4f53\u4ee3\u7801\u8bf7\u6253\u5f00/sdcard/app/libs/AI2D.py\u67e5\u770b\n    def config_preprocess(self,input_image_size=None):\n        with ScopedTiming("set preprocess config",self.debug_mode > 0):\n            # \u521d\u59cb\u5316ai2d\u9884\u5904\u7406\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3asensor\u7ed9\u5230AI\u7684\u5c3a\u5bf8\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6einput_image_size\u81ea\u884c\u4fee\u6539\u8f93\u5165\u5c3a\u5bf8\n            ai2d_input_size=input_image_size if input_image_size else self.rgb888p_size\n            # \u8bbe\u7f6epadding\u9884\u5904\u7406\n            self.ai2d.pad(self.get_pad_param(), 0, [104,117,123])\n            # \u8bbe\u7f6eresize\u9884\u5904\u7406\n            self.ai2d.resize(nn.interp_method.tf_bilinear, nn.interp_mode.half_pixel)\n            # \u6784\u5efa\u9884\u5904\u7406\u6d41\u7a0b,\u53c2\u6570\u4e3a\u9884\u5904\u7406\u8f93\u5165tensor\u7684shape\u548c\u9884\u5904\u7406\u8f93\u51fa\u7684tensor\u7684shape\n            self.ai2d.build([1,3,ai2d_input_size[1],ai2d_input_size[0]],[1,3,self.model_input_size[1],self.model_input_size[0]])\n\n    # \u81ea\u5b9a\u4e49\u4efb\u52a1\u540e\u5904\u7406,\u8fd9\u91cc\u4f7f\u7528\u4e86aidemo\u5e93\u7684face_det_post_process\u63a5\u53e3\n    def postprocess(self,results):\n        with ScopedTiming("postprocess",self.debug_mode > 0):\n            res = aidemo.face_det_post_process(self.confidence_threshold,self.nms_threshold,self.model_input_size[0],self.anchors,self.rgb888p_size,results)\n            if len(res)==0:\n                return res\n            else:\n                return res[0]\n\n    # \u8ba1\u7b97padding\u53c2\u6570\n    def get_pad_param(self):\n        dst_w = self.model_input_size[0]\n        dst_h = self.model_input_size[1]\n        # \u8ba1\u7b97\u6700\u5c0f\u7684\u7f29\u653e\u6bd4\u4f8b\uff0c\u7b49\u6bd4\u4f8b\u7f29\u653e\n        ratio_w = dst_w / self.rgb888p_size[0]\n        ratio_h = dst_h / self.rgb888p_size[1]\n        if ratio_w < ratio_h:\n            ratio = ratio_w\n        else:\n            ratio = ratio_h\n        new_w = (int)(ratio * self.rgb888p_size[0])\n        new_h = (int)(ratio * self.rgb888p_size[1])\n        dw = (dst_w - new_w) / 2\n        dh = (dst_h - new_h) / 2\n        top = (int)(round(0))\n        bottom = (int)(round(dh * 2 + 0.1))\n        left = (int)(round(0))\n        right = (int)(round(dw * 2 - 0.1))\n        return [0,0,0,0,top, bottom, left, right]\n\n# \u81ea\u5b9a\u4e49\u6ce8\u89c6\u4f30\u8ba1\u4efb\u52a1\u7c7b\nclass EyeGazeApp(AIBase):\n    def __init__(self,kmodel_path,model_input_size,rgb888p_size=[1920,1080],display_size=[1920,1080],debug_mode=0):\n        super().__init__(kmodel_path,model_input_size,rgb888p_size,debug_mode)\n        # kmodel\u8def\u5f84\n        self.kmodel_path=kmodel_path\n        # \u6ce8\u89c6\u4f30\u8ba1\u6a21\u578b\u8f93\u5165\u5206\u8fa8\u7387\n        self.model_input_size=model_input_size\n        # sensor\u7ed9\u5230AI\u7684\u56fe\u50cf\u5206\u8fa8\u7387\uff0c\u5bbd16\u5b57\u8282\u5bf9\u9f50\n        self.rgb888p_size=[ALIGN_UP(rgb888p_size[0],16),rgb888p_size[1]]\n        # \u89c6\u9891\u8f93\u51faVO\u5206\u8fa8\u7387\uff0c\u5bbd16\u5b57\u8282\u5bf9\u9f50\n        self.display_size=[ALIGN_UP(display_size[0],16),display_size[1]]\n        # debug\u6a21\u5f0f\n        self.debug_mode=debug_mode\n        # Ai2d\u5b9e\u4f8b\uff0c\u7528\u4e8e\u5b9e\u73b0\u6a21\u578b\u9884\u5904\u7406\n        self.ai2d=Ai2d(debug_mode)\n        # \u8bbe\u7f6eAi2d\u7684\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\u548c\u7c7b\u578b\n        self.ai2d.set_ai2d_dtype(nn.ai2d_format.NCHW_FMT,nn.ai2d_format.NCHW_FMT,np.uint8, np.uint8)\n\n    # \u914d\u7f6e\u9884\u5904\u7406\u64cd\u4f5c\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86crop\u548cresize\uff0cAi2d\u652f\u6301crop/shift/pad/resize/affine\uff0c\u5177\u4f53\u4ee3\u7801\u8bf7\u6253\u5f00/sdcard/app/libs/AI2D.py\u67e5\u770b\n    def config_preprocess(self,det,input_image_size=None):\n        with ScopedTiming("set preprocess config",self.debug_mode > 0):\n            # \u521d\u59cb\u5316ai2d\u9884\u5904\u7406\u914d\u7f6e\n            ai2d_input_size=input_image_size if input_image_size else self.rgb888p_size\n            # \u8ba1\u7b97crop\u9884\u5904\u7406\u53c2\u6570\n            x, y, w, h = map(lambda x: int(round(x, 0)), det[:4])\n            # \u8bbe\u7f6ecrop\u9884\u5904\u7406\n            self.ai2d.crop(x,y,w,h)\n            # \u8bbe\u7f6eresize\u9884\u5904\u7406\n            self.ai2d.resize(nn.interp_method.tf_bilinear, nn.interp_mode.half_pixel)\n            # \u6784\u5efa\u9884\u5904\u7406\u6d41\u7a0b,\u53c2\u6570\u4e3a\u9884\u5904\u7406\u8f93\u5165tensor\u7684shape\u548c\u9884\u5904\u7406\u8f93\u51fa\u7684tensor\u7684shape\n            self.ai2d.build([1,3,ai2d_input_size[1],ai2d_input_size[0]],[1,3,self.model_input_size[1],self.model_input_size[0]])\n\n    # \u81ea\u5b9a\u4e49\u540e\u5904\u7406\uff0cresults\u662f\u6a21\u578b\u8f93\u51fa\u7684array\u5217\u8868\uff0c\u8fd9\u91cc\u8c03\u7528\u4e86aidemo\u5e93\u7684eye_gaze_post_process\u63a5\u53e3\n    def postprocess(self,results):\n        with ScopedTiming("postprocess",self.debug_mode > 0):\n            post_ret = aidemo.eye_gaze_post_process(results)\n            return post_ret[0],post_ret[1]\n\n# \u81ea\u5b9a\u4e49\u6ce8\u89c6\u4f30\u8ba1\u7c7b\nclass EyeGaze:\n    def __init__(self,face_det_kmodel,eye_gaze_kmodel,det_input_size,eye_gaze_input_size,anchors,confidence_threshold=0.25,nms_threshold=0.3,rgb888p_size=[1920,1080],display_size=[1920,1080],debug_mode=0):\n        # \u4eba\u8138\u68c0\u6d4b\u6a21\u578b\u8def\u5f84\n        self.face_det_kmodel=face_det_kmodel\n        # \u4eba\u8138\u6ce8\u89c6\u4f30\u8ba1\u6a21\u578b\u8def\u5f84\n        self.eye_gaze_kmodel=eye_gaze_kmodel\n        # \u4eba\u8138\u68c0\u6d4b\u6a21\u578b\u8f93\u5165\u5206\u8fa8\u7387\n        self.det_input_size=det_input_size\n        # \u4eba\u8138\u6ce8\u89c6\u4f30\u8ba1\u6a21\u578b\u8f93\u5165\u5206\u8fa8\u7387\n        self.eye_gaze_input_size=eye_gaze_input_size\n        # anchors\n        self.anchors=anchors\n        # \u7f6e\u4fe1\u5ea6\u9608\u503c\n        self.confidence_threshold=confidence_threshold\n        # nms\u9608\u503c\n        self.nms_threshold=nms_threshold\n        # sensor\u7ed9\u5230AI\u7684\u56fe\u50cf\u5206\u8fa8\u7387\uff0c\u5bbd16\u5b57\u8282\u5bf9\u9f50\n        self.rgb888p_size=[ALIGN_UP(rgb888p_size[0],16),rgb888p_size[1]]\n        # \u89c6\u9891\u8f93\u51faVO\u5206\u8fa8\u7387\uff0c\u5bbd16\u5b57\u8282\u5bf9\u9f50\n        self.display_size=[ALIGN_UP(display_size[0],16),display_size[1]]\n        # debug_mode\u6a21\u5f0f\n        self.debug_mode=debug_mode\n        # \u4eba\u8138\u68c0\u6d4b\u5b9e\u4f8b\n        self.face_det=FaceDetApp(self.face_det_kmodel,model_input_size=self.det_input_size,anchors=self.anchors,confidence_threshold=self.confidence_threshold,nms_threshold=self.nms_threshold,rgb888p_size=self.rgb888p_size,display_size=self.display_size,debug_mode=0)\n        # \u6ce8\u89c6\u4f30\u8ba1\u5b9e\u4f8b\n        self.eye_gaze=EyeGazeApp(self.eye_gaze_kmodel,model_input_size=self.eye_gaze_input_size,rgb888p_size=self.rgb888p_size,display_size=self.display_size)\n        # \u4eba\u8138\u68c0\u6d4b\u914d\u7f6e\u9884\u5904\u7406\n        self.face_det.config_preprocess()\n\n    #run\u65b9\u6cd5\n    def run(self,input_np):\n        # \u5148\u8fdb\u884c\u4eba\u8138\u68c0\u6d4b\n        det_boxes=self.face_det.run(input_np)\n        eye_gaze_res=[]\n        for det_box in det_boxes:\n            # \u5bf9\u6bcf\u4e00\u4e2a\u68c0\u6d4b\u5230\u7684\u4eba\u8138\u505a\u6ce8\u89c6\u4f30\u8ba1\n            self.eye_gaze.config_preprocess(det_box)\n            pitch,yaw=self.eye_gaze.run(input_np)\n            eye_gaze_res.append((pitch,yaw))\n        return det_boxes,eye_gaze_res\n\n    # \u7ed8\u5236\u6ce8\u89c6\u4f30\u8ba1\u6548\u679c\n    def draw_result(self,pl,dets,eye_gaze_res):\n        pl.osd_img.clear()\n        if dets:\n            for det,gaze_ret in zip(dets,eye_gaze_res):\n                pitch , yaw = gaze_ret\n                length = self.display_size[0]/ 2\n                x, y, w, h = map(lambda x: int(round(x, 0)), det[:4])\n                x = x * self.display_size[0] // self.rgb888p_size[0]\n                y = y * self.display_size[1] // self.rgb888p_size[1]\n                w = w * self.display_size[0] // self.rgb888p_size[0]\n                h = h * self.display_size[1] // self.rgb888p_size[1]\n                center_x = (x + w / 2.0)\n                center_y = (y + h / 2.0)\n                dx = -length * math.sin(pitch) * math.cos(yaw)\n                target_x = int(center_x + dx)\n                dy = -length * math.sin(yaw)\n                target_y = int(center_y + dy)\n                pl.osd_img.draw_arrow(int(center_x), int(center_y), target_x, target_y, color = (255,255,0,0), size = 30, thickness = 2)\n\n\nif __name__=="__main__":\n    # \u663e\u793a\u6a21\u5f0f\uff0c\u9ed8\u8ba4"hdmi",\u53ef\u4ee5\u9009\u62e9"hdmi"\u548c"lcd"\uff0ck230d\u53d7\u9650\u4e8e\u5185\u5b58\u4e0d\u652f\u6301\n    display_mode="lcd"\n    if display_mode=="hdmi":\n        display_size=[1920,1080]\n    else:\n        display_size=[800,480]\n    # \u4eba\u8138\u68c0\u6d4b\u6a21\u578b\u8def\u5f84\n    face_det_kmodel_path="/sdcard/examples/kmodel/face_detection_320.kmodel"\n    # \u4eba\u8138\u6ce8\u89c6\u4f30\u8ba1\u6a21\u578b\u8def\u5f84\n    eye_gaze_kmodel_path="/sdcard/examples/kmodel/eye_gaze.kmodel"\n    # \u5176\u4ed6\u53c2\u6570\n    anchors_path="/sdcard/examples/utils/prior_data_320.bin"\n    rgb888p_size=[1920,1080]\n    face_det_input_size=[320,320]\n    eye_gaze_input_size=[448,448]\n    confidence_threshold=0.5\n    nms_threshold=0.2\n    anchor_len=4200\n    det_dim=4\n    anchors = np.fromfile(anchors_path, dtype=np.float)\n    anchors = anchors.reshape((anchor_len,det_dim))\n\n    # \u521d\u59cb\u5316PipeLine\uff0c\u53ea\u5173\u6ce8\u4f20\u7ed9AI\u7684\u56fe\u50cf\u5206\u8fa8\u7387\uff0c\u663e\u793a\u7684\u5206\u8fa8\u7387\n    pl=PipeLine(rgb888p_size=rgb888p_size,display_size=display_size,display_mode=display_mode)\n    pl.create()\n    eg=EyeGaze(face_det_kmodel_path,eye_gaze_kmodel_path,det_input_size=face_det_input_size,eye_gaze_input_size=eye_gaze_input_size,anchors=anchors,confidence_threshold=confidence_threshold,nms_threshold=nms_threshold,rgb888p_size=rgb888p_size,display_size=display_size)\n    try:\n        while True:\n            os.exitpoint()\n            with ScopedTiming("total",1):\n                img=pl.get_frame()                          # \u83b7\u53d6\u5f53\u524d\u5e27\n                det_boxes,eye_gaze_res=eg.run(img)          # \u63a8\u7406\u5f53\u524d\u5e27\n                eg.draw_result(pl,det_boxes,eye_gaze_res)   # \u7ed8\u5236\u63a8\u7406\u6548\u679c\n                pl.show_image()                             # \u5c55\u793a\u63a8\u7406\u6548\u679c\n                gc.collect()\n    except Exception as e:\n        sys.print_exception(e)\n    finally:\n        eg.face_det.deinit()\n        eg.eye_gaze.deinit()\n        pl.destroy()\n'})}),"\n",(0,i.jsx)(n.h2,{id:"4\u5b9e\u9a8c\u7ed3\u679c",children:"4.\u5b9e\u9a8c\u7ed3\u679c"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"person_088",src:s(32214).Z+"",width:"640",height:"480"})}),"\n",(0,i.jsx)(n.p,{children:"\u200b\t\u70b9\u51fb\u8fd0\u884c\u4ee3\u7801\u540e\uff0c\u53ef\u4ee5\u5728\u663e\u793a\u5c4f\u4e0a\u770b\u5230\u4eba\u8138\u6ce8\u89c6\u65b9\u5411\u68c0\u6d4b\u7684\u7ed3\u679c\u3002\u5982\u4e0b\u6240\u793a\uff1a"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"image-20250423172528682",src:s(87884).Z+"",width:"1417",height:"970"})})]})}function l(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},87884:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/image-20250423172528682-cbc70fcf7dcf105779e58b2ffc07d81f.png"},32214:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/person_088-95925beb29d5a7b236f53e9540e499aa.png"},11151:(e,n,s)=>{s.d(n,{Z:()=>a,a:()=>d});var i=s(67294);const t={},_=i.createContext(t);function d(e){const n=i.useContext(_);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),i.createElement(_.Provider,{value:n},e.children)}}}]);